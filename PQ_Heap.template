// Name: Ivan Tlaseca
// Class: CS 3305
// Term: Spring 2021
// Instructor: Dr. Haddad
// Assignment: 10

#include <cassert>
#include <cstdlib>
#include <iostream>
#include <iomanip>


template <class T>
void priority_queue_heap<T>::enqueue(const T& value){
    hp.insert(value);
}
template <class T>
T priority_queue_heap<T>::dequeue(){    //How are we determining the priority of an item? Is it the first element? (Following a +1 incremental enqueue to the array)
    return hp.remove();
}

template <class T>
T priority_queue_heap<T>::front(){
   return hp.HPfront();
    
}

template <class T>
bool priority_queue_heap<T>::is_empty() const {
    if(hp.is_empty()){
        return true;
    }else{
        return false;
    }
}

template <class T>
bool priority_queue_heap<T>::is_full() const {
    if(hp.is_full()){
        return true;
    }else{
        return false;
    }
}

template <class T>
int priority_queue_heap<T>::size(){
   return hp.HPsize();
}

template <class T>
bool priority_queue_heap<T>::check_PQ_heap(){
    return hp.check_heap();
}